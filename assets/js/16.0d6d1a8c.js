(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{414:function(s,a,t){"use strict";t.r(a);var e=t(2),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"数据库基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库基础"}},[s._v("#")]),s._v(" 数据库基础")]),s._v(" "),a("p",[s._v("数据库是学习JavaWeb的一个前置，只有了解了数据库的操作和使用，我们才能更好地组织和管理网站应用产生的数据。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img2.baidu.com/it/u=873816781,3605513900&fm=26&fmt=auto",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"什么是数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据库"}},[s._v("#")]),s._v(" 什么是数据库")]),s._v(" "),a("p",[s._v("数据库是数据管理的有效技术，是由一批数据构成的有序集合，这些数据被存放在结构化的数据表里。数据表之间相互关联，反映客观事物间的本质联系。数据库能有效地帮助一个组织或企业科学地管理各类信息资源。简而言之，我们的数据可以交给数据库来帮助我们进行管理，同时数据库能够为我们提供高效的访问性能。")]),s._v(" "),a("p",[s._v("在JavaSE学习阶段中，我们学习了如何使用文件I/O来将数据保存到本地，这样就可以将一个数据持久地存储在本地，即使程序重新打开，我们也能加载回上一次的数据，但是当我们的数据变得非常多的时候，这样的方式就显得不太方便了。同时我们如果需要查找众多数据的中的某一个，就只能加载到内存再进行查找，这样显然是很难受的！")]),s._v(" "),a("p",[s._v("而数据库就是专门做这事的，我们可以快速查找想要的数据，便捷地插入、修改和删除数据，并且数据库不仅能做这些事，还能提供更多便于管理数据和操作数据的功能！")]),s._v(" "),a("h3",{attrs:{id:"常见的数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的数据库"}},[s._v("#")]),s._v(" 常见的数据库")]),s._v(" "),a("p",[s._v("常见的数据库有很多种，包括但不限于：")]),s._v(" "),a("ul",[a("li",[s._v("MySQL - 免费，用的最多的，开源数据库，适用于中小型")]),s._v(" "),a("li",[s._v("Microsoft SQL Server - 收钱的，但是提供技术支持，适用于Windows Server")]),s._v(" "),a("li",[s._v("Oracle - 收钱的，大型数据库系统")])]),s._v(" "),a("p",[s._v("而我们要学习的是MySQL数据，其实无论学习哪种数据库，SQL语句大部分都是通用的，只有少许语法是不通用的，因此我们只需要学习一种数据库其他的也就差不多都会了。")]),s._v(" "),a("h3",{attrs:{id:"数据模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据模型"}},[s._v("#")]),s._v(" 数据模型")]),s._v(" "),a("p",[s._v("数据模型与现实世界中的模型一样，是对现实世界数据特征的一种抽象。实际上，我们之前学习的类就是对现实世界数据的一种抽象，比如一个学生的特征包括姓名，年龄，年级，学号，专业等，这些特征也称为实体的一种属性，属性具有以下特点：")]),s._v(" "),a("ul",[a("li",[s._v("属性不可再分")]),s._v(" "),a("li",[s._v("一个实体的属性可以有很多个")]),s._v(" "),a("li",[s._v("用于唯一区分不同实体的的属性，称为Key，比如每个同学的学号都是不一样的")]),s._v(" "),a("li",[s._v("属性取值可以有一定的约束，比如性别只能是男或是女")])]),s._v(" "),a("p",[s._v("实体或是属性之间可以具有一定的联系，比如一个老师可以教很多个学生，而学生相对于老师就是被教授的关系；又比如每个同学都有一个学号与其唯一对应，因此学号和学生之间也有一种联系。而像一个老师教多个学生的联系就是一种一对多的联系（1:n），而学号唯一对应，就是一种一对一的联系（1:1）；每一个老师不仅可以教多个学生，每一个学生也可以有多个教师，这就是一种多对多的联系（n:m）")]),s._v(" "),a("p",[s._v("MySQL就是一种关系型数据库，通过使用关系型数据库，我们就可以很好地存储这样带有一定联系的数据。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ffile1.renrendoc.com%2Ffileroot_temp2%2F2020-10%2F17%2F763fb9f3-871d-4f1c-abe7-0a5025cf52a5%2F763fb9f3-871d-4f1c-abe7-0a5025cf52a52.gif&refer=http%3A%2F%2Ffile1.renrendoc.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1637926750&t=31a308e5d8efd32bae55a40c963f459d",alt:"img"}})]),s._v(" "),a("p",[s._v("通过构建一个ER图，我们就能很好地理清不同数据模型之间的关系和特点。")]),s._v(" "),a("h2",{attrs:{id:"数据库的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库的创建"}},[s._v("#")]),s._v(" 数据库的创建")]),s._v(" "),a("p",[s._v("既然了解了属性和联系，那么我们就来尝试创建一个数据库，并在数据库中添加用于存放数据的表，每一张表都代表一种实体的数据。首先我们要明确，我们需要创建什么样子的表：")]),s._v(" "),a("ul",[a("li",[s._v("学生表：用于存放所有学生的数据，学生（"),a("u",[s._v("学号")]),s._v("，姓名，性别）")]),s._v(" "),a("li",[s._v("教师表：用于存放所有教师的数据，教师（"),a("u",[s._v("教师号")]),s._v("，姓名）")]),s._v(" "),a("li",[s._v("授课表：用于存放教师与学生的授课信息，授课（学号，教师号）")])]),s._v(" "),a("p",[s._v("其中，标注下划线的属性，作为Key，用于区别于其他实体数据的唯一标记。")]),s._v(" "),a("p",[s._v("为了理解起来更加轻松，我们从图形界面操作再讲到SQL语句，请不要着急。我们现在通过Navicat或idea自带的数据库客户端来创建一个数据库和上述三个表。")]),s._v(" "),a("h2",{attrs:{id:"数据库的规范化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库的规范化"}},[s._v("#")]),s._v(" 数据库的规范化")]),s._v(" "),a("p",[s._v("要去设计存放一个实体的表，我们就需要了解数据库的关系规范化，尽可能减少“不好”的关系存在，如何设计一个优良的关系模型是最关键的内容！简而言之，我们要学习一下每一个表该如何去设计。")]),s._v(" "),a("h3",{attrs:{id:"第一范式-1nf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一范式-1nf"}},[s._v("#")]),s._v(" 第一范式（1NF）")]),s._v(" "),a("p",[s._v("第一范式是指数据库的每一列都是不可分割的基本数据项，而下面这样的就存在可分割的情况：")]),s._v(" "),a("ul",[a("li",[s._v("学生（姓名，电话号码）")])]),s._v(" "),a("p",[s._v("电话号码实际上包括了"),a("code",[s._v("家用座机电话")]),s._v("和"),a("code",[s._v("移动电话")]),s._v("，因此它可以被拆分为：")]),s._v(" "),a("ul",[a("li",[s._v("学生（姓名，座机号码，手机号码）")])]),s._v(" "),a("p",[s._v("满足第一范式是关系型数据库最基本的要求！")]),s._v(" "),a("h3",{attrs:{id:"第二范式-2nf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二范式-2nf"}},[s._v("#")]),s._v(" 第二范式（2NF）")]),s._v(" "),a("p",[s._v("第二范式要求表中必须存在主键，且其他的属性必须完全依赖于主键，比如：")]),s._v(" "),a("ul",[a("li",[s._v("学生（"),a("u",[s._v("学号")]),s._v("，姓名，性别）")])]),s._v(" "),a("p",[s._v("学号是每个学生的唯一标识，每个学生都有着不同的学号，因此此表中存在一个主键，并且每个学生的所有属性都依赖于学号，学号发生改变就代表学生发生改变，姓名和性别都会因此发生改变，所有此表满足第二范式。")]),s._v(" "),a("h3",{attrs:{id:"第三范式-3nf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三范式-3nf"}},[s._v("#")]),s._v(" 第三范式（3NF）")]),s._v(" "),a("p",[s._v("在满足第二范式的情况下，所有的属性都不传递依赖于主键，满足第三范式。")]),s._v(" "),a("ul",[a("li",[s._v("学生借书情况（"),a("u",[s._v("借阅编号")]),s._v("，学生学号，书籍编号，书籍名称，书籍作者）")])]),s._v(" "),a("p",[s._v("实际上书籍编号依赖于借阅编号，而书籍名称和书籍作者依赖于书籍编号，因此存在传递依赖的情况，我们可以将书籍信息进行单独拆分为另一张表：")]),s._v(" "),a("ul",[a("li",[s._v("学生借书情况（"),a("u",[s._v("借阅编号")]),s._v("，学生学号，书籍编号）")]),s._v(" "),a("li",[s._v("书籍（"),a("u",[s._v("书籍编号")]),s._v("，书籍名称，书籍作者）")])]),s._v(" "),a("p",[s._v("这样就消除了传递依赖，从而满足第三范式。")]),s._v(" "),a("h3",{attrs:{id:"bcnf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bcnf"}},[s._v("#")]),s._v(" BCNF")]),s._v(" "),a("p",[s._v("BCNF作为第三范式的补充，假设仓库管理关系表为StorehouseManage(仓库ID, 存储物品ID, 管理员ID, 数量)，且有一个管理员只在一个仓库工作；一个仓库可以存储多种物品。这个数据库表中存在如下决定关系：")]),s._v(" "),a("p",[s._v("(仓库ID, 存储物品ID) →(管理员ID, 数量)")]),s._v(" "),a("p",[s._v("(管理员ID, 存储物品ID) → (仓库ID, 数量)")]),s._v(" "),a("p",[s._v("所以，(仓库ID, 存储物品ID)和(管理员ID, 存储物品ID)都是StorehouseManage的候选关键字，表中的唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系：")]),s._v(" "),a("p",[s._v("(仓库ID) → (管理员ID)")]),s._v(" "),a("p",[s._v("(管理员ID) → (仓库ID)")]),s._v(" "),a("p",[s._v("即存在关键字段决定关键字段的情况，如果修改管理员ID，那么就必须逐一进行修改，所以其不符合BCNF范式。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"认识sql语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识sql语句"}},[s._v("#")]),s._v(" 认识SQL语句")]),s._v(" "),a("p",[s._v("结构化查询语言（Structured Query Language）简称SQL，这是一种特殊的语言，它专门用于数据库的操作。每一种数据库都支持SQL，但是他们之间会存在一些细微的差异，因此不同的数据库都存在自己的“方言”。")]),s._v(" "),a("p",[s._v("SQL语句不区分大小写（关键字推荐使用大写），它支持多行，并且需要使用"),a("code",[s._v(";")]),s._v("进行结尾！")]),s._v(" "),a("p",[s._v("SQL也支持注释，通过使用"),a("code",[s._v("--")]),s._v("或是"),a("code",[s._v("#")]),s._v("来编写注释内容，也可以使用"),a("code",[s._v("/*")]),s._v("来进行多行注释。")]),s._v(" "),a("p",[s._v("我们要学习的就是以下四种类型的SQL语言：")]),s._v(" "),a("ul",[a("li",[s._v("数据查询语言（Data Query Language, DQL）基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块。")]),s._v(" "),a("li",[s._v("数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除，是开发以数据为中心的应用程序必定会使用到的指令。")]),s._v(" "),a("li",[s._v("数据库定义语言DDL(Data Definition Language)，是用于描述数据库中要存储的现实世界实体的语言。")]),s._v(" "),a("li",[s._v("DCL（Data Control Language）是数据库控制语言。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL。")])]),s._v(" "),a("p",[s._v("我们平时所说的CRUD其实就是增删改查（Create/Retrieve/Update/Delete）")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"数据库定义语言-ddl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库定义语言-ddl"}},[s._v("#")]),s._v(" 数据库定义语言（DDL）")]),s._v(" "),a("h3",{attrs:{id:"数据库操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[s._v("#")]),s._v(" 数据库操作")]),s._v(" "),a("p",[s._v("我们可以通过"),a("code",[s._v("create database")]),s._v("来创建一个数据库：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("database")]),s._v(" 数据库名\n")])])]),a("p",[s._v("为了能够支持中文，我们在创建时可以设定编码格式：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATABASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("IF")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" 数据库名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),s._v(" utf8 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLLATE")]),s._v(" utf8_general_ci"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("如果我们创建错误了，我们可以将此数据库删除，通过使用"),a("code",[s._v("drop database")]),s._v("来删除一个数据库：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("database")]),s._v(" 数据库名\n")])])]),a("h3",{attrs:{id:"创建表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建表"}},[s._v("#")]),s._v(" 创建表")]),s._v(" "),a("p",[s._v("数据库创建完成后，我们一般通过"),a("code",[s._v("create table")]),s._v("语句来创建一张表：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("列级约束条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n             列名 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("列级约束条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("表级约束条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("h3",{attrs:{id:"sql数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql数据类型"}},[s._v("#")]),s._v(" SQL数据类型")]),s._v(" "),a("p",[s._v("以下的数据类型用于字符串存储：")]),s._v(" "),a("ul",[a("li",[s._v("char(n)可以存储任意字符串，但是是固定长度为n，如果插入的长度小于定义长度时，则用空格填充。")]),s._v(" "),a("li",[s._v("varchar(n)也可以存储任意数量字符串，长度不固定，但不能超过n，不会用空格填充。")])]),s._v(" "),a("p",[s._v("以下数据类型用于存储数字：")]),s._v(" "),a("ul",[a("li",[s._v("smallint用于存储小的整数，范围在 (-32768，32767)")]),s._v(" "),a("li",[s._v("int用于存储一般的整数，范围在 (-2147483648，2147483647)")]),s._v(" "),a("li",[s._v("bigint用于存储大型整数，范围在 (-9,223,372,036,854,775,808，9,223,372,036,854,775,807)")]),s._v(" "),a("li",[s._v("float用于存储单精度小数")]),s._v(" "),a("li",[s._v("double用于存储双精度的小数")])]),s._v(" "),a("p",[s._v("以下数据类型用于存储时间：")]),s._v(" "),a("ul",[a("li",[s._v("date存储日期")]),s._v(" "),a("li",[s._v("time存储时间")]),s._v(" "),a("li",[s._v("year存储年份")]),s._v(" "),a("li",[s._v("datetime用于混合存储日期+时间")])]),s._v(" "),a("h3",{attrs:{id:"列级约束条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列级约束条件"}},[s._v("#")]),s._v(" 列级约束条件")]),s._v(" "),a("p",[s._v("列级约束有六种：主键Primary key、外键foreign key 、唯一 unique、检查 check （MySQL不支持）、默认default 、非空/空值 not null/ null")]),s._v(" "),a("h3",{attrs:{id:"表级约束条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表级约束条件"}},[s._v("#")]),s._v(" 表级约束条件")]),s._v(" "),a("p",[s._v("表级约束有四种：主键、外键、唯一、检查")]),s._v(" "),a("p",[s._v("现在我们通过SQL语句来创建我们之前提到的三张表。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CONSTRAINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("外键名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOREIGN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" 字段名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("，字段名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("，…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("REFERENCES")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("主表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 主键列"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("，主键列"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("，…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h3",{attrs:{id:"修改表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改表"}},[s._v("#")]),s._v(" 修改表")]),s._v(" "),a("p",[s._v("如果我们想修改表结构，我们可以通过"),a("code",[s._v("alter table")]),s._v("来进行修改：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" 新列名 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("列级约束条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\t\t\t\t\t\t\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLUMN")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("restrict")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cascade")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\t\t\t\t\t\t\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLUMN")]),s._v(" 列名 新数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("我们可以通过ADD来添加一个新的列，通过DROP来删除一个列，不过我们可以添加restrict或cascade，默认是restrict，表示如果此列作为其他表的约束或视图引用到此列时，将无法删除，而cascade会强制连带引用此列的约束、视图一起删除。还可以通过ALTER来修改此列的属性。")]),s._v(" "),a("h3",{attrs:{id:"删除表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除表"}},[s._v("#")]),s._v(" 删除表")]),s._v(" "),a("p",[s._v("我们可以通过"),a("code",[s._v("drop table")]),s._v("来删除一个表：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("restrict")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cascade")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("其中restrict和cascade上面的效果一致。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"数据库操纵语言-dml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库操纵语言-dml"}},[s._v("#")]),s._v(" 数据库操纵语言（DML）")]),s._v(" "),a("p",[s._v("前面我们已经学习了如何使用SQL语句来创建、修改、删除数据库以及表，而如何向数据库中插入、删除、更新数据，将是本版块讨论的重点。")]),s._v(" "),a("h3",{attrs:{id:"插入数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入数据"}},[s._v("#")]),s._v(" 插入数据")]),s._v(" "),a("p",[s._v("通过使用"),a("code",[s._v("insert into")]),s._v("语句来向数据库中插入一条数据（一条记录）：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("如果插入的数据与列一一对应，那么可以省略列名，但是如果希望向指定列上插入数据，就需要给出列名：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("我们也可以一次性向数据库中插入多条数据：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 值"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("我们来试试看向我们刚刚创建的表中添加三条数据。")]),s._v(" "),a("h3",{attrs:{id:"修改数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改数据"}},[s._v("#")]),s._v(" 修改数据")]),s._v(" "),a("p",[s._v("我们可以通过"),a("code",[s._v("update")]),s._v("语句来更新表中的数据：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UPDATE")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件\n")])])]),a("p",[s._v("注意，SQL语句中的等于判断是"),a("code",[s._v("=")])]),s._v(" "),a("p",[s._v("**警告：**如果忘记添加"),a("code",[s._v("WHERE")]),s._v("字句来限定条件，将使得整个表中此列的所有数据都被修改！")]),s._v(" "),a("h3",{attrs:{id:"删除数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除数据"}},[s._v("#")]),s._v(" 删除数据")]),s._v(" "),a("p",[s._v("我们可以通过使用"),a("code",[s._v("delete")]),s._v("来删除表中的数据：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELETE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名\n")])])]),a("p",[s._v("通过这种方式，将删除表中全部数据，我们也可以使用"),a("code",[s._v("where")]),s._v("来添加条件，只删除指定的数据：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELETE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件\n")])])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"数据库查询语言-dql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库查询语言-dql"}},[s._v("#")]),s._v(" 数据库查询语言（DQL）")]),s._v(" "),a("p",[s._v("数据库的查询是我们整个数据库学习中的重点内容，面对数据库中庞大的数据，该如何去寻找我们想要的数据，就是我们主要讨论的问题。")]),s._v(" "),a("h3",{attrs:{id:"单表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单表查询"}},[s._v("#")]),s._v(" 单表查询")]),s._v(" "),a("p",[s._v("单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用"),a("code",[s._v("select")]),s._v("语句来进行单表查询：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 指定查询某一列数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 会以别名显示此列")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" 列名 别名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询所有的列数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 只查询不重复的值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名\n")])])]),a("p",[s._v("我们也可以添加"),a("code",[s._v("where")]),s._v("字句来限定查询目标：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件\n")])])]),a("h3",{attrs:{id:"常用查询条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用查询条件"}},[s._v("#")]),s._v(" 常用查询条件")]),s._v(" "),a("ul",[a("li",[s._v("一般的比较运算符，包括=、>、<、>=、<=、!=等。")]),s._v(" "),a("li",[s._v("是否在集合中：in、not in")]),s._v(" "),a("li",[s._v("字符模糊匹配：like，not like")]),s._v(" "),a("li",[s._v("多重条件连接查询：and、or、not")])]),s._v(" "),a("p",[s._v("我们来尝试使用一下上面这几种条件。")]),s._v(" "),a("h3",{attrs:{id:"排序查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序查询"}},[s._v("#")]),s._v(" 排序查询")]),s._v(" "),a("p",[s._v("我们可以通过"),a("code",[s._v("order by")]),s._v("来将查询结果进行排序：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n")])])]),a("p",[s._v("使用ASC表示升序排序，使用DESC表示降序排序，默认为升序。")]),s._v(" "),a("p",[s._v("我们也可以可以同时添加多个排序：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n")])])]),a("p",[s._v("这样会先按照列名1进行排序，每组列名1相同的数据再按照列名2排序。")]),s._v(" "),a("h3",{attrs:{id:"聚集函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚集函数"}},[s._v("#")]),s._v(" 聚集函数")]),s._v(" "),a("p",[s._v("聚集函数一般用作统计，包括：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("count([distinct]*)")]),s._v("统计所有的行数（distinct表示去重再统计，下同）")]),s._v(" "),a("li",[a("code",[s._v("count([distinct]列名)")]),s._v("统计某列的值总和")]),s._v(" "),a("li",[a("code",[s._v("sum([distinct]列名)")]),s._v("求一列的和（注意必须是数字类型的）")]),s._v(" "),a("li",[a("code",[s._v("avg([distinct]列名)")]),s._v("求一列的平均值（注意必须是数字类型）")]),s._v(" "),a("li",[a("code",[s._v("max([distinct]列名)")]),s._v("求一列的最大值")]),s._v(" "),a("li",[a("code",[s._v("min([distinct]列名)")]),s._v("求一列的最小值")])]),s._v(" "),a("p",[s._v("一般聚集函数是这样使用的：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件 \n")])])]),a("h3",{attrs:{id:"分组和分页查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组和分页查询"}},[s._v("#")]),s._v(" 分组和分页查询")]),s._v(" "),a("p",[s._v("通过使用"),a("code",[s._v("group by")]),s._v("来对查询结果进行分组，它需要结合聚合函数一起使用：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列名\n")])])]),a("p",[s._v("我们还可以添加"),a("code",[s._v("having")]),s._v("来限制分组条件：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" 约束条件\n")])])]),a("p",[s._v("我们可以通过"),a("code",[s._v("limit")]),s._v("来限制查询的数量，只取前n个结果：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" 数量\n")])])]),a("p",[s._v("我们也可以进行分页：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" 起始位置"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("数量\n")])])]),a("h3",{attrs:{id:"多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询"}},[s._v("#")]),s._v(" 多表查询")]),s._v(" "),a("p",[s._v("多表查询是同时查询的两个或两个以上的表，多表查询会提通过连接转换为单表查询。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),a("p",[s._v("直接这样查询会得到两张表的笛卡尔积，也就是每一项数据和另一张表的每一项数据都结合一次，会产生庞大的数据。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件\n")])])]),a("p",[s._v("这样，只会从笛卡尔积的结果中得到满足条件的数据。")]),s._v(" "),a("p",[s._v("**注意：**如果两个表中都带有此属性吗，需要添加表名前缀来指明是哪一个表的数据。")]),s._v(" "),a("h3",{attrs:{id:"自身连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自身连接查询"}},[s._v("#")]),s._v(" 自身连接查询")]),s._v(" "),a("p",[s._v("自身连接，就是将表本身和表进行笛卡尔积计算，得到结果，但是由于表名相同，因此要先起一个别名：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 别名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 表名 别名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),a("p",[s._v("其实自身连接查询和前面的是一样的，只是连接对象变成自己和自己了。")]),s._v(" "),a("h3",{attrs:{id:"外连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外连接查询"}},[s._v("#")]),s._v(" 外连接查询")]),s._v(" "),a("p",[s._v("外连接就是专门用于联合查询情景的，比如现在有一个存储所有用户的表，还有一张用户详细信息的表，我希望将这两张表结合到一起来查看完整的数据，我们就可以通过使用外连接来进行查询，外连接有三种方式：")]),s._v(" "),a("ul",[a("li",[s._v("通过使用"),a("code",[s._v("inner join")]),s._v("进行内连接，只会返回两个表满足条件的交集部分：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2019053022120536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg1ODIwMQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),s._v(" "),a("ul",[a("li",[s._v("通过使用"),a("code",[s._v("left join")]),s._v("进行左连接，不仅会返回两个表满足条件的交集部分，也会返回左边表中的全部数据，而在右表中缺失的数据会使用"),a("code",[s._v("null")]),s._v("来代替（右连接"),a("code",[s._v("right join")]),s._v("同理，只是反过来而已，这里就不再介绍了）：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190530221543230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg1ODIwMQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),s._v(" "),a("h3",{attrs:{id:"嵌套查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套查询"}},[s._v("#")]),s._v(" 嵌套查询")]),s._v(" "),a("p",[s._v("我们可以将查询的结果作为另一个查询的条件，比如：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("我们来再次尝试编写一下在最开始我们查找某教师所有学生的SQL语句。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"数据库控制语言-dcl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库控制语言-dcl"}},[s._v("#")]),s._v(" 数据库控制语言（DCL）")]),s._v(" "),a("p",[s._v("庞大的数据库不可能由一个人来管理，我们需要更多的用户来一起管理整个数据库。")]),s._v(" "),a("h3",{attrs:{id:"创建用户"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建用户"}},[s._v("#")]),s._v(" 创建用户")]),s._v(" "),a("p",[s._v("我们可以通过"),a("code",[s._v("create user")]),s._v("来创建用户：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USER")]),s._v(" 用户名 identified "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 密码"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("也可以不带密码：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USER")]),s._v(" 用户名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("我们可以通过@来限制用户登录的登录IP地址，"),a("code",[s._v("%")]),s._v("表示匹配所有的IP地址，默认使用的就是任意IP地址。")]),s._v(" "),a("h3",{attrs:{id:"登陆用户"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登陆用户"}},[s._v("#")]),s._v(" 登陆用户")]),s._v(" "),a("p",[s._v("首先需要添加一个环境变量，然后我们通过cmd去登陆mysql：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("login "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u 用户名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("p\n")])])]),a("p",[s._v("输入密码后即可登陆此用户，我们输入以下命令来看看能否访问所有数据库：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("databases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("我们发现，虽然此用户能够成功登录，但是并不能查看完整的数据库列表，这是因为此用户还没有权限！")]),s._v(" "),a("h3",{attrs:{id:"用户授权"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户授权"}},[s._v("#")]),s._v(" 用户授权")]),s._v(" "),a("p",[s._v("我们可以通过使用"),a("code",[s._v("grant")]),s._v("来为一个数据库用户进行授权：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("grant")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("all")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("权限"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("权限"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" 数据库"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("表 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" 用户 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("grant")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("option")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("其中all代表授予所有权限，当数据库和表为"),a("code",[s._v("*")]),s._v("，代表为所有的数据库和表都授权。如果在最后添加了"),a("code",[s._v("with grant option")]),s._v("，那么被授权的用户还能将已获得的授权继续授权给其他用户。")]),s._v(" "),a("p",[s._v("我们可以使用"),a("code",[s._v("revoke")]),s._v("来收回一个权限：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("revoke")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("all")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("权限"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("权限"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" 数据库"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("表 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 用户\n")])])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"视图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[s._v("#")]),s._v(" 视图")]),s._v(" "),a("p",[s._v("视图本质就是一个查询的结果，不过我们每次都可以通过打开视图来按照我们想要的样子查看数据。既然视图本质就是一个查询的结果，那么它本身就是一个虚表，并不是真实存在的，数据实际上还是存放在原来的表中。")]),s._v(" "),a("p",[s._v("我们可以通过"),a("code",[s._v("create view")]),s._v("来创建视图;")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VIEW")]),s._v(" 视图名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" 子查询语句 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHECK")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OPTION")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("WITH CHECK OPTION是指当创建后，如果更新视图中的数据，是否要满足子查询中的条件表达式，不满足将无法插入，创建后，我们就可以使用"),a("code",[s._v("select")]),s._v("语句来直接查询视图上的数据了，因此，还能在视图的基础上，导出其他的视图。")]),s._v(" "),a("ol",[a("li",[s._v("若视图是由两个以上基本表导出的，则此视图不允许更新。")]),s._v(" "),a("li",[s._v("若视图的字段来自字段表达式或常数，则不允许对此视图执行INSERT和UPDATE操作，但允许执行DELETE操作。")]),s._v(" "),a("li",[s._v("若视图的字段来自集函数，则此视图不允许更新。")]),s._v(" "),a("li",[s._v("若视图定义中含有GROUP BY子句，则此视图不允许更新。")]),s._v(" "),a("li",[s._v("若视图定义中含有DISTINCT短语，则此视图不允许更新。")]),s._v(" "),a("li",[s._v("若视图定义中有嵌套查询，并且内层查询的FROM子句中涉及的表也是导出该视图的基本表，则此视图不允许更新。例如将成绩在平均成绩之上的元组定义成一个视图GOOD_SC： CREATE VIEW GOOD_SC AS SELECT Sno, Cno, Grade FROM SC WHERE Grade > (SELECT AVG(Grade) FROM SC); 　　导出视图GOOD_SC的基本表是SC，内层查询中涉及的表也是SC，所以视图GOOD_SC是不允许更新的。")]),s._v(" "),a("li",[s._v("一个不允许更新的视图上定义的视图也不允许更新")])]),s._v(" "),a("p",[s._v("通过"),a("code",[s._v("drop")]),s._v("来删除一个视图：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("view")]),s._v(" apptest\n")])])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),a("p",[s._v("在数据量变得非常庞大时，通过创建索引，能够大大提高我们的查询效率，就像Hash表一样，它能够快速地定位元素存放的位置，我们可以通过下面的命令创建索引：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 创建索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" 索引名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看表中的索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student\n")])])]),a("p",[s._v("我们也可以通过下面的命令删除一个索引：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" 索引名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" 表名\n")])])]),a("p",[s._v("虽然添加索引后会使得查询效率更高，但是我们不能过度使用索引，索引为我们带来高速查询效率的同时，也会在数据更新时产生额外建立索引的开销，同时也会占用磁盘资源。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"触发器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发器"}},[s._v("#")]),s._v(" 触发器")]),s._v(" "),a("p",[s._v("触发器就像其名字一样，在某种条件下会自动触发，在"),a("code",[s._v("select")]),s._v("/"),a("code",[s._v("update")]),s._v("/"),a("code",[s._v("delete")]),s._v("时，会自动执行我们预先设定的内容，触发器通常用于检查内容的安全性，相比直接添加约束，触发器显得更加灵活。")]),s._v(" "),a("p",[s._v("触发器所依附的表称为基本表，当触发器表上发生"),a("code",[s._v("select")]),s._v("/"),a("code",[s._v("update")]),s._v("/"),a("code",[s._v("delete")]),s._v("等操作时，会自动生成两个临时的表（new表和old表，只能由触发器使用）")]),s._v(" "),a("p",[s._v("比如在"),a("code",[s._v("insert")]),s._v("操作时，新的内容会被插入到new表中；在"),a("code",[s._v("delete")]),s._v("操作时，旧的内容会被移到old表中，我们仍可在old表中拿到被删除的数据；在"),a("code",[s._v("update")]),s._v("操作时，旧的内容会被移到old表中，新的内容会出现在new表中。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TRIGGER")]),s._v(" 触发器名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("BEFORE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AFTER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UPDATE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELETE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("视图名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOR EACH ROW")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELETE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sno "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" new"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sno\n")])])]),a("p",[s._v("FOR EACH ROW表示针对每一行都会生效，无论哪行进行指定操作都会执行触发器！")]),s._v(" "),a("p",[s._v("通过下面的命令来查看触发器：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" TRIGGERS\n")])])]),a("p",[s._v("如果不需要，我们就可以删除此触发器：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TRIGGER")]),s._v(" 触发器名称\n")])])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[s._v("#")]),s._v(" 事务")]),s._v(" "),a("p",[s._v("当我们要进行的操作非常多时，比如要依次删除很多个表的数据，我们就需要执行大量的SQL语句来完成，这些数据库操作语句就可以构成一个事务！只有Innodb引擎支持事务，我们可以这样来查看支持的引擎：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" ENGINES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("MySQL默认采用的是Innodb引擎，我们也可以去修改为其他的引擎。")]),s._v(" "),a("p",[s._v("事务具有以下特性：")]),s._v(" "),a("ul",[a("li",[s._v("**原子性：**一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。")]),s._v(" "),a("li",[s._v("**一致性：**在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。")]),s._v(" "),a("li",[s._v("**隔离性：**数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。")]),s._v(" "),a("li",[s._v("**持久性：**事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。")])]),s._v(" "),a("p",[s._v("我们通过以下例子来探究以下事务：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开始事务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rollback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#回滚事务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("savepoint")]),s._v(" 回滚点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#添加回滚点")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rollback")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" 回滚点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#回滚到指定回滚点")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#提交事务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 一旦提交，就无法再进行回滚了！")]),s._v("\n")])])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"选学内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选学内容"}},[s._v("#")]),s._v(" 选学内容")]),s._v(" "),a("p",[a("strong",[s._v("函数")]),s._v("和"),a("strong",[s._v("存储过程")]),s._v("并没有包含在我们的教程当中，但是这并不代表它们就不重要，通过学习它们能够让你的数据库管理能力更上一层楼，它们能够捆绑一组SQL语句运行，并且可以反复使用，大大提高工作效率。")])])}),[],!1,null,null,null);a.default=r.exports}}]);